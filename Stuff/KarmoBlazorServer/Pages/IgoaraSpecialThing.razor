@page "/specialthing"

@using KarmoBlazorServer.Data
@using KarmoBlazorServerDB.Data.KarmoBlazorServer
@inject AuthenticationStateProvider AuthenticationStateProvider

@*
	Using OwningComponentBase ensures that the service and related services
	that share its scope are disposed with the component.
	Otherwise DbContext in ForecastService will live for the life of the
	connection, which may be problematic if clients stay
	connected for a long time.
	We access WeatherForecastService using @Service
*@

@inherits OwningComponentBase<SpecialThingService>

<h1>SpecialThing</h1>

<!-- AuthorizeView allows us to only show sections of the page -->
<!-- based on the security on the current user -->
<authorizeview>
    <!-- Show this section if the user is logged in -->
    <authorized>
        <h4>Hello, @UserIdentityName!</h4>
        @if (specialThings == null)
        {
            <!-- Show this if the current user has no data... yet... -->
            <p><em>Loading...</em></p>
        }
        else
        {
            <!-- Show the forecasts for the current user -->
            <table class="table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Type</th>
                        <th>Creator</th>
                        <th>Date</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var specialThing in specialThings)
                    {
                        <tr>
                            <td>@specialThing.Id</td>
                            <td>@specialThing.Name</td>
                            <td>@specialThing.Type</td>
                            <td>@specialThing.Creator</td>
                            <td>@specialThing.Date.ToShortDateString()</td>
                            <td>
                                <!-- Edit the current Temp -->
                                <button class="btn btn-primary" @onclick="(() => EditSpecialThing(specialThing))">
                                    Edit
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            <p>
                <!-- Add a new Temp -->
                <button class="btn btn-success" @onclick="AddNewSpecialThing">
                    Add New Temp
                </button>
            </p>

            @if (ShowPopup)
            {
                <!-- This is the popup to create or edit a Temp -->
                <div class="modal" tabindex="-1" style="display:block" role="dialog">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h3 class="modal-title">Edit Temp</h3>

                                <!-- Button to close the popup -->
                                <button type="button" class="close" @onclick="ClosePopup">
                                    <span aria-hidden="true">X</span>
                                </button>
                            </div>
                            <!-- Edit form for the current Temp -->
                            <div class="modal-body">
                                <input class="form-control" type="text" placeholder="작품 이름" @bind="objSpecialThing.Name" />
                                <input class="form-control" type="text" placeholder="제작사" @bind="objSpecialThing.Creator" />
                                <input class="form-control" type="date" placeholder="년도" @bind="objSpecialThing.Date" />
                                <input class="form-control" type="text" placeholder="타입" @bind="objSpecialThing.Type" />
                                <br />
                                <!-- Button to save the Temp -->
                                <button class="btn btn-success" @onclick="SaveSpecialThing">
                                    Save
                                </button>&nbsp;
                                <!-- Only show delete button if not a new record -->
                                @if (objSpecialThing.Id > 0)
                                {
                                    <!-- Button to delete the Temp -->
                                    <button class="btn btn-danger" @onclick="DeleteSpecialThing">
                                        Delete
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </authorized>

    <!-- Show this section if the user is not logged in -->
    <notauthorized>
        <p>You're not signed in.</p>
    </notauthorized>
</authorizeview>

@code
{
    // AuthenticationState is available as a CascadingParameter

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask
    {
        get;
        set;
    }

    List<SpecialThing> specialThings = new List<SpecialThing>();

    private string UserIdentityName = "";

    SpecialThing objSpecialThing = new SpecialThing();
    bool ShowPopup = false;

    void ClosePopup()
    {
        // Close the Popup
        ShowPopup = false;
    }

    void AddNewSpecialThing()
    {
        // Make new Temp
        objSpecialThing = new SpecialThing();
        // Set Id to 0 so we know it is a new record
        objSpecialThing.Id = 0;
        // Open the Popup
        ShowPopup = true;
    }

    async Task SaveSpecialThing()
    {
        // Close the Popup
        ShowPopup = false;
        // A new Temp will have the Id set to 0
        if (objSpecialThing.Id == 0)
        {
            // Create new Temp
            SpecialThing objNewSpecialThing = new SpecialThing();
            objNewSpecialThing.Name = objSpecialThing.Name;
            objNewSpecialThing.Type = objSpecialThing.Type;
            // objNewSpecialThing.Date = objSpecialThing.Date;
            objNewSpecialThing.Date = DateTime.Now;
            objNewSpecialThing.Creator = objSpecialThing.Creator;
            // Save the result
            var result = @Service.CreateSpecialThingAsync(objNewSpecialThing);
        }
        else
         
            // This is an update
            var result = @Service.UpdateSpecialThingAsync(objSpecialThing);
        }

        // Get the forecasts for the current user
        specialThings = await @Service.GetSpecialThingAsync();
    }

    async Task DeleteSpecialThing()
    {
        // Close the Popup
        ShowPopup = false;
        // Delete the Temp
        var result = @Service.DeleteSpecialThingAsync(objSpecialThing);
        // Get the forecasts for the current user
        // temps = await @Service.GetTempAsync(UserIdentityName);
        specialThings = await @Service.GetSpecialThingAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        // Get the current user
        if (authenticationStateTask != null)
        {
            var user = (await authenticationStateTask).User;
            if (user.Identity != null)
            {
                UserIdentityName = user.Identity.Name ?? "";
            }
        }
        // Get the forecasts for the current user
        // We access WeatherForecastService using @Service
        specialThings = await @Service.GetSpecialThingAsync();
    }

    void EditSpecialThing(SpecialThing specialThing)
    {
        // Set the selected Temp
        // as the current Temp
        objSpecialThing = specialThing;
        // Open the Popup
        ShowPopup = true;
    }
}